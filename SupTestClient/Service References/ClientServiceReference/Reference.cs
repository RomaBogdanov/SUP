//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SupTestClient.ClientServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientServiceReference.ITableService", CallbackContract=typeof(SupTestClient.ClientServiceReference.ITableServiceCallback))]
    public interface ITableService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/GetData", ReplyAction="http://tempuri.org/ITableService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/GetData", ReplyAction="http://tempuri.org/ITableService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ITableService/GetDataUsingDataContractResponse")]
        SupClientConnectionLib.ServiceRef.CompositeType GetDataUsingDataContract(SupClientConnectionLib.ServiceRef.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ITableService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<SupClientConnectionLib.ServiceRef.CompositeType> GetDataUsingDataContractAsync(SupClientConnectionLib.ServiceRef.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/GetTable", ReplyAction="http://tempuri.org/ITableService/GetTableResponse")]
        System.Data.DataTable GetTable(SupClientConnectionLib.ServiceRef.CompositeType composite, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/GetTable", ReplyAction="http://tempuri.org/ITableService/GetTableResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetTableAsync(SupClientConnectionLib.ServiceRef.CompositeType composite, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/InsertRow", ReplyAction="http://tempuri.org/ITableService/InsertRowResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SupClientConnectionLib.ServiceRef.CompositeType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SupClientConnectionLib.ServiceRef.TableName))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        bool InsertRow(SupClientConnectionLib.ServiceRef.CompositeType composite, object[] objs, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/InsertRow", ReplyAction="http://tempuri.org/ITableService/InsertRowResponse")]
        System.Threading.Tasks.Task<bool> InsertRowAsync(SupClientConnectionLib.ServiceRef.CompositeType composite, object[] objs, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/UpdateRow", ReplyAction="http://tempuri.org/ITableService/UpdateRowResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SupClientConnectionLib.ServiceRef.CompositeType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SupClientConnectionLib.ServiceRef.TableName))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        bool UpdateRow(SupClientConnectionLib.ServiceRef.CompositeType composite, int rowNumber, object[] objs, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/UpdateRow", ReplyAction="http://tempuri.org/ITableService/UpdateRowResponse")]
        System.Threading.Tasks.Task<bool> UpdateRowAsync(SupClientConnectionLib.ServiceRef.CompositeType composite, int rowNumber, object[] objs, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/DeleteRow", ReplyAction="http://tempuri.org/ITableService/DeleteRowResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SupClientConnectionLib.ServiceRef.CompositeType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SupClientConnectionLib.ServiceRef.TableName))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        bool DeleteRow(SupClientConnectionLib.ServiceRef.CompositeType composite, object[] row, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/DeleteRow", ReplyAction="http://tempuri.org/ITableService/DeleteRowResponse")]
        System.Threading.Tasks.Task<bool> DeleteRowAsync(SupClientConnectionLib.ServiceRef.CompositeType composite, object[] row, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/GetImage", ReplyAction="http://tempuri.org/ITableService/GetImageResponse")]
        byte[] GetImage(int id, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/GetImage", ReplyAction="http://tempuri.org/ITableService/GetImageResponse")]
        System.Threading.Tasks.Task<byte[]> GetImageAsync(int id, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/Authorize", ReplyAction="http://tempuri.org/ITableService/AuthorizeResponse")]
        int Authorize(string login, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/Authorize", ReplyAction="http://tempuri.org/ITableService/AuthorizeResponse")]
        System.Threading.Tasks.Task<int> AuthorizeAsync(string login, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/CheckAuthorize", ReplyAction="http://tempuri.org/ITableService/CheckAuthorizeResponse")]
        bool CheckAuthorize(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/CheckAuthorize", ReplyAction="http://tempuri.org/ITableService/CheckAuthorizeResponse")]
        System.Threading.Tasks.Task<bool> CheckAuthorizeAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/ExitAuthorize", ReplyAction="http://tempuri.org/ITableService/ExitAuthorizeResponse")]
        bool ExitAuthorize(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITableService/ExitAuthorize", ReplyAction="http://tempuri.org/ITableService/ExitAuthorizeResponse")]
        System.Threading.Tasks.Task<bool> ExitAuthorizeAsync(string login);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITableServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITableService/InsRow")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SupClientConnectionLib.ServiceRef.CompositeType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SupClientConnectionLib.ServiceRef.TableName))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        void InsRow(string tableName, object[] objs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITableService/UpdRow")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SupClientConnectionLib.ServiceRef.CompositeType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SupClientConnectionLib.ServiceRef.TableName))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        void UpdRow(string tableName, int rowNumber, object[] objs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITableService/DelRow")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SupClientConnectionLib.ServiceRef.CompositeType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SupClientConnectionLib.ServiceRef.TableName))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        void DelRow(string tableName, object[] objs);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITableServiceChannel : SupTestClient.ClientServiceReference.ITableService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TableServiceClient : System.ServiceModel.DuplexClientBase<SupTestClient.ClientServiceReference.ITableService>, SupTestClient.ClientServiceReference.ITableService {
        
        public TableServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TableServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TableServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TableServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TableServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public SupClientConnectionLib.ServiceRef.CompositeType GetDataUsingDataContract(SupClientConnectionLib.ServiceRef.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<SupClientConnectionLib.ServiceRef.CompositeType> GetDataUsingDataContractAsync(SupClientConnectionLib.ServiceRef.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public System.Data.DataTable GetTable(SupClientConnectionLib.ServiceRef.CompositeType composite, string login) {
            return base.Channel.GetTable(composite, login);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetTableAsync(SupClientConnectionLib.ServiceRef.CompositeType composite, string login) {
            return base.Channel.GetTableAsync(composite, login);
        }
        
        public bool InsertRow(SupClientConnectionLib.ServiceRef.CompositeType composite, object[] objs, string login) {
            return base.Channel.InsertRow(composite, objs, login);
        }
        
        public System.Threading.Tasks.Task<bool> InsertRowAsync(SupClientConnectionLib.ServiceRef.CompositeType composite, object[] objs, string login) {
            return base.Channel.InsertRowAsync(composite, objs, login);
        }
        
        public bool UpdateRow(SupClientConnectionLib.ServiceRef.CompositeType composite, int rowNumber, object[] objs, string login) {
            return base.Channel.UpdateRow(composite, rowNumber, objs, login);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRowAsync(SupClientConnectionLib.ServiceRef.CompositeType composite, int rowNumber, object[] objs, string login) {
            return base.Channel.UpdateRowAsync(composite, rowNumber, objs, login);
        }
        
        public bool DeleteRow(SupClientConnectionLib.ServiceRef.CompositeType composite, object[] row, string login) {
            return base.Channel.DeleteRow(composite, row, login);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRowAsync(SupClientConnectionLib.ServiceRef.CompositeType composite, object[] row, string login) {
            return base.Channel.DeleteRowAsync(composite, row, login);
        }
        
        public byte[] GetImage(int id, string login) {
            return base.Channel.GetImage(id, login);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetImageAsync(int id, string login) {
            return base.Channel.GetImageAsync(id, login);
        }
        
        public int Authorize(string login, string pass) {
            return base.Channel.Authorize(login, pass);
        }
        
        public System.Threading.Tasks.Task<int> AuthorizeAsync(string login, string pass) {
            return base.Channel.AuthorizeAsync(login, pass);
        }
        
        public bool CheckAuthorize(string login) {
            return base.Channel.CheckAuthorize(login);
        }
        
        public System.Threading.Tasks.Task<bool> CheckAuthorizeAsync(string login) {
            return base.Channel.CheckAuthorizeAsync(login);
        }
        
        public bool ExitAuthorize(string login) {
            return base.Channel.ExitAuthorize(login);
        }
        
        public System.Threading.Tasks.Task<bool> ExitAuthorizeAsync(string login) {
            return base.Channel.ExitAuthorizeAsync(login);
        }
    }
}
