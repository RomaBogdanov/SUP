<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #><#

var entityTypeRelativePath = @"VisTablesCreating.xml";

var entityTypePath = Host.ResolvePath(entityTypeRelativePath);

var entityTypeDoc = XDocument.Load(entityTypePath);
var entityQuery = from entity in entityTypeDoc.Root.Elements()
	let name = entity.Attribute("Name")
	let tabName = entity.Attribute("TabName")
	let colId = entity.Attribute("ColId")
	let comment = entity.Attribute("Comment")
	where name != null && !string.IsNullOrEmpty(name.Value)
	select new
	{
		Name = name.Value,
		TabName = tabName.Value,
		ColId = colId.Value,
		Comment = comment.Value,
		Element = entity
	};
#>
namespace SupHost
{
<#foreach(var entity in entityQuery) { #>

    partial class <#=entity.Name#>TableBehavior : VisitorsDBTableBehavior
    {
        public <#=entity.Name#>TableBehavior()
        {
            this.StandartSetup("<#=entity.TabName#>", "<#=entity.ColId#>");
        }
    }

	partial class <#=entity.Name#>TableWrapper : AbstractTableWrapper
    {
        public <#=entity.Name#>TableWrapper()
        { 
			this.getTableBehavior = new <#=entity.Name#>TableBehavior(); 
		}
    }
<#}#>
}