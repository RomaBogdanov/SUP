<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #><#

var entityTypeRelativePath = @"Views.xml";

var entityTypePath = Host.ResolvePath(entityTypeRelativePath);

var entityTypeDoc = XDocument.Load(entityTypePath);
var entityQuery = from entity in entityTypeDoc.Root.Elements()
	let name = entity.Attribute("Name")
	let canMinimize = entity.Attribute("CanMinimize")
	where name != null && !string.IsNullOrEmpty(name.Value)
	select new
	{
		Name = name.Value,
		CanMinimize = canMinimize != null ? canMinimize.Value : "true",
		Element = entity
	};
#>
using SupRealClient.Common.Interfaces;
using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Input;

/*
ФАЙЛ СГЕНЕРИРОВАН АВТОМАТИЧЕСКИ
ИЗМЕНЕНИЯ НЕ ВНОСИТЬ!!!!!
*/

namespace SupRealClient.Views
{
<#foreach(var entity in entityQuery) { #>
    /// <summary>
    /// Логика взаимодействия для <#=entity.Name#>.xaml - базовая часть для всех View
    /// </summary>
    public partial class <#=entity.Name#> : IWindow
    {
        public bool CanMinimize { get; private set; } = <#=entity.CanMinimize#>;

        public bool IsRealClose { get; set; } = true;

        public string WindowName { get; private set; } = "<#=entity.Name#>";

        public IWindow ParentWindow { get; set; }

        public object WindowResult { get; set; }

        public void AfterInitialize()
        {
            this.Closing += Window_Closing;
            this.StateChanged += Window_StateChanged;
            this.Loaded += Window_Loaded;
            this.WindowStartupLocation = WindowStartupLocation.CenterScreen;

            CreateColumns();
        }

        public void CloseWindow(CancelEventArgs e)
        {
            if (!IsRealClose)
            {
                IsRealClose = true;
                e.Cancel = true;
                this.Hide();
            }
        }

        public void Unsuscribe()
        {
            this.Closing -= this.Window_Closing;
        }

        private void Window_Closing(object sender, CancelEventArgs e)
        {
            ViewManager.Instance.CloseWindow(this, true, e);
        }

        public void Handling_OnClose()
        {
            this.Close();
        }

        public void Handling_OnClose(object result = null)
        {
            WindowResult = result;
            this.Close();
        }

        private void Window_StateChanged(object sender, EventArgs e)
        {
            ViewManager.Instance.SetChildrenState(sender as Window, false);
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            SetDefaultColumn();
        }

        partial void CreateColumns();

        partial void SetDefaultColumn();

        private void Window_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape)
            {
                Close();
            }
        }
    }

<#}#>
}
